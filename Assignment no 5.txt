[Q1]
package pract1;
//5)	Show the example of multi-level inheritance with constructor invocation.
class base1{
	base1(){
		System.out.println("Inside parameterless constructor of base ");
	}
	base1(int a){
		System.out.println("Inside parameterized constructor of base ");
	}
}
class sub1 extends base1{
	sub1(){
		System.out.println("Inside parameterless constructor of sub1 ");
	}
	sub1(int a){
		super(20);
		System.out.println("Inside parameterized constructor of sub1 ");
	}
}
class sub2 extends sub1{
	sub2(){
		System.out.println("Inside parameterless constructor of sub2 ");
	}
	sub2(int a){
		super();
		System.out.println("Inside parameterized constructor of sub2 ");
	}
}
public class que5 {
	public static void main(String args[]) {
		base1 b1 = new sub2();
		System.out.println();
		sub1 s1= new sub1(20);
		System.out.println();
		sub2 s2 = new sub2(40);
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------
[Q2]
package Assignment01;
//create a class "Vehicle", define a method "public void start()" in it. From this 
//class derive a class FourWheeler. How will u override "start()" method of parent class?
class vehicle{
	public void start(){
		System.out.println("Inside start method of vehicle");
	}
}
class FourWheeler extends vehicle{
	public void start(){
		System.out.println("Inside start method of FourWheeler");
	}
}
public class Assign01{

	public static void main(String[] args) {
		vehicle v1 = new FourWheeler();
		v1.start();
		vehicle v2 = new vehicle();
		v2.start();
		FourWheeler v3 = new FourWheeler();
		v3.start();
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q3]
package pract1;
//6)	Show the example of hierarchical inheritance with constructor invocation.
class p1{
	p1(){
		System.out.println("Inside parameterless constructor of p1 ");
	}
	p1(int a){
		System.out.println("Inside parameterized constructor of p1 ");
	}
}
class p2 extends p1{
	p2(){
		System.out.println("Inside parameterless constructor of p2 ");
	}
	p2(int a){
		System.out.println("Inside parameterized constructor of p2 ");
	}
}
class p3 extends p1{
	p3(){
		System.out.println("Inside parameterless constructor of p3 ");
	}
	p3(int a){
		System.out.println("Inside parameterized constructor of p3 ");
	}
}

public class que6 {
	public static void main(String args[]) {
		p3 p = new p3();
		System.out.println();
		p2 p2 = new p2();
	}
}
package pract1;


class shape{
	void draw(){
		System.out.println("draw shape");
	}
}
class circle extends shape{
	void draw() {
		System.out.println("draw circle");
	}
}
class polygon extends shape{
void draw() {
	System.out.println("draw polygon");
	}
}
class Rectangle extends shape{
void draw() {
		System.out.println("draw Rectangle");
	}
}
 class shapedemo{
	static shape whichshape(shape ref) {
		ref.draw();
		return ref;
	}
	public static void main(String args[]) {
		shape ref = whichshape(new Rectangle());
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Q4]
package Assignment01;
/*Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.*/
class Top{
	void disp1() {
		System.out.println("Inside display disp1 of top");
	}
}
class Bottom1 extends Top{
	void disp1() {
		System.out.println("Inside display disp1 of Bottom1");
	}
}
class Bottom2 extends Top{
	void disp1() {
		System.out.println("Inside display disp1 of Bottom2");
	}
}
class Bottom3 extends Top{
	void disp1() {
		System.out.println("Inside display disp1 of Bottom3");
	}
}

public class Assign02 {

	public static void main(String[] args) {
		Top t1 = new Bottom3();
		t1.disp1();
		Top t2 = new Top();
		t2.disp1();
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q5]
5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.
package Assign;
abstract class base
{
	 base(){
		
	}
      abstract void draw();

}  
class triangle extends base
{
    void draw()
    {
        System.out.println("inside triangle");
    }
}
class polygon extends base
{
    void draw()
    {
        System.out.println("inside polygon");
    }
}
class circle extends base
{
    void draw()
    {
        System.out.println("inside circle");
    }
}
public class Main
{
    public static void main (String args[])
    {
  base arr[]=new base[3];
  arr[0]=new triangle();
  arr[1]=new polygon();
  arr[2]=new circle();
  for(int i=0;i<arr.length;i++)
  {
      arr[i].draw();
  }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q6]
package Assignment01;
/*6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.*/
interface A{
	void disp1();
}
interface B extends A{
	void disp1();
	void disp2();
}
class C implements B{
	public void disp1() {
		System.out.println("Inside disp of c");
	}
	public void disp2() {
		System.out.println("Inside disp2 of c");
	}
}

public class Assign06 {

	public static void main(String[] args) {
		A ref = new C();
		ref.disp1();
		if(ref instanceof C) {
			C ref1 =(C)ref;
			ref1.disp2();
		}
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q7]
package proj01;

/* 7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it 
and call the members.*/
class parent1{
	void disp1() {
		System.out.println("Inside display of disp1 parent 1 class");
	}
}
interface parent2{
	void disp2();
}
class child extends parent1 implements parent2{
	public void disp2() {
		System.out.println("Inside disp2 of parent2 interface");
	}
}
public class Assign07 {

	public static void main(String[] args) {
		child ref = new child();
		ref.disp2();//
		ref.disp1();//disp1 will be called as this method is inherited in child
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q8]
package Assignment01;

/*Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.*/
class base1{
	base1(int a){	
		System.out.println("in base class parameterized constructor");
	}
}
class sub1 extends base1{
	sub1(){
		super(10);
		System.out.println("in sub class parameterless constructor");
	}
	sub1(int aa){
		super(22);
		System.out.println("in sub class 1 parameterized constructor");
	}
	sub1(int x,int y){
		super(33);
		System.out.println("in sub class 2 parameterized constructor");
	}
} 
public class Assign08 {

	public static void main(String[] args) {
		base1 b = new sub1();
		base1 b2 = new sub1(22); 
		base1 b3 = new sub1(22,33);
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------
[Q9]
package Assignment01;
/*create interface "Game" , have an abstract method "play()". from this interface 
 * implements classes like "Cricket" , "FootBall" and "Tennis".
/*Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as
 parameter.inside "perform()" see to it that any child object passed ,its "play()" 
 method should be invoked. Call "perform()" method from main function.*/
interface Game{
	  public abstract void play();
}
class Cricket implements Game{
	public void play() {
		System.out.println("Inside cricket Game");
	}
}
class football implements Game{
	public void play() {
		System.out.println("Inside Play football");
	}
	public void dogoal() {
		System.out.println("your Team has goaled");
	}
}
class Tennis implements Game{
	public void play() {
		System.out.println("Inside Play");
	}
}


public class Assign09 {
	static void perform(Game ref) {
		ref.play();
		/*
		 * football ref1 = new football(); 
		 * ref1.dogoal();
		 */
		// this will not work as we have passed object of football and call play
	    // method on another football
		//as is also may give class cast exception we other than football object passed
		//for this we will check if object is of type football then only call the 
		//method of football
		//
		/*
		 * if(ref instanceof football) { football ref1 = (football)ref; ref1.dogoal(); }
		 */
		
		
	}
	
	public static void main(String[] args) {
		/*
		 * perform(new football()); perform(new Tennis());
		 */
		
		//using array of references
		Game g[] = new Game[3];
		g[0]=new Cricket();
		g[1]=new football();
		g[2]=new Tennis();
		
		for(int i=0;i<g.length;i++) {
			g[i].play();
		}
	}
}
