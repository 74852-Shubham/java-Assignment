I18N
0 to 65535-->16 
16 bit means 2 bytes use to store unicode characters.
java code is compile once and run anywhere.
Internationalization--> client front different countries see out pages in different languages.
local members must be initilized before use.
native code-->native code written in c,c++(as it is near to machine level for faster acess.)
native methods-->To improve performance of System.
if we want to achive machine level communication.
if dont want to use java code.
JRE_:-(java runtime environment) communicates between java application and computer hardware.
sc.next()-read upto space.
sc.nextLine()-->reads after space also.
NUllpointer Exception:- When we invoke method on null reference we get NullPointer Exception.lo 
Object is created:- as soon as object is created memory allocated for instance member and constructor get called.
types of constructors:-
1)default/no-arg constuctor.
2)parameterized constructor

java madhe destructor method nasto. 
just before object gets garbage collected finalize method get called.

-->we can acess static data members inside static method.
1)we cannot acess non static data in static member function.(because we call static data members at class loading time at that time Nonstatic members dosen't get memory allocated. 
2)we can acess static data in non static member fun.(becase to acess non-static fun we need to create obj at that time static members alredy got memory)

-->class loaders loads java class to jvm

static member fun need to be called expicitly but static block  get executed implicitly as soon as class get loaded.
static block usually use to assign initialize static data members.

Non static block executed as many time as many objects created.
Syntax:-
{

}

final keyword(just like constant):-
final keyword can be applied to:-
a)Instance Members
b)class variables/static member0s
c)class
d)member fun
e)local variables

-->final members can be initialized inside constructor only.

Overloading:-
same function name with different no of arguments.

-->we cannot override final method(it will give error)

-->Overriding method should have same or more Acessibility than overriden method.

-->Interface methods are bydefault public and abstract.

-->Instance checks is a relationship and returns true or false.

-->if overriden method has parent written type and overriding method has child return type.
then it is called covarient written type.

-->in overriding in child class we provide specific implementation of child class in parent class constructor.

-->composition example:- create object of house class and store reference of rooms inside house obj as when house
 is destroyed rooms also get destroyed.

-->Aggregation:- create object of department and store teacher class reference but teacher object is refered by another ref also
so as dept destroyed but teacher does not get destroyed.  

-->White Box-we know that on which reference we are methods
black box-we dont know on which object we are calling method.

-->we cannot override static method
-->overriding method cannot be directly static if overriden is not static

-->overriding method should have same or more acessibility than overriden method.

-->equals method of object class if two objects are equal acc to this there there hashcode must be same or
even if equals method return false by calling getHashcode() may return same same hashcode.

-->ToString method of object class.
public String toString() 
	{
	        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    	}

-->we can call static methods with help of ref even if methods are reference is null.

-->when base and sub contain two overloaded static method and static block, when we call
 base static method with sub ref, sub class dosen't get loaded.

-->child cha class load zala tr parent cha class load honarch with static method invocation.
reverse may be false.

-->enum is user defined datatype(set of predefined values)
enum values are not numerical they are fixed

-->enum values are internally public static final

-->gc method use to request for garbage collection.
public static void gc()
 {
        Runtime.getRuntime().gc();
 }

-->equals method are overriden in string it will only check string equality not reference.
equals methods is slow as compared to '==' operator.

-->s.intern() method checks if string s string exist in string pool if yes then return 
reference of it. if no then adds the string to string pool and return reference of it.

-->if we try to modify existing string then new string get created.

-->Stringbuilder sb1 = new StringBuilder("hello");
is used to modify existing string.(it is mutable)

System.out.println("" +""+a);   uses stringBuilder class internally.

-->Inner classes used for event handling mechanism and to implement helper classes class.
class within class(hidden from all other classes.

-->Outer.inner i=o1.new inner();  //Syntax to instantiate inner class.

-->top level classes (public or default) && (non nested)

-->nested classes-- 1)static nested   2)non static nexted(inner classes)
classes defined inside any method are called  local or inner classes.

-->internally outer and inner classses are represented as 
1.	Outer.class
2.	Outer$Inner.class

--nested classes(can achive easy maintainance and encapsulation).

-->wrapper classes are used to wrap primitives.
-->all the wrapper classes are derived from "java.lang.Object". They all are "final".

-->Autoboxing converting primitive to Wrapper.
int num=10;
ToWrap normally:-
Integer ob= new int(num);//wrapped
Integer ob=num;//Autoboxing
Unboxing:-
int num=ob.intVal();//unwrapping normally
int num=ob;//Auto Unwrapping

-->getClass.getName()==>it returns the name of that class to which class "Class" instance represents.

-->void disp(int ...k)  // it can take 0 or more arguments
	{
		for(int i=0;i<k.length;i++)
		{
			S.o.p(k[i]);.

		}

	}

-->Rules For Oveloading methods using Widening, boxing, and var-args.

1) Primitive widening uses the "smallest" method argument possible.
2) Used individually, boxing and var-args are compatible with overloading.
3) You cannot widen from one wrapper type to another (IS-A fails).
4) You cannot widen and then box (An int can't become Long).
5) You can box and then widen.(An int can become an Object, via Integer).


Bridge Method:- lets consider class Base {
public object v1(){}
}
class sub extends base{
class string v1{}
}

for compiler v1  method of sub and base are diff for this compiler creates bridge as calling 
sub class method from base class method.
(sub madhe varchya method chi ek copy tyyar karto)

-->parent ki protected method child me directly Accessible hai.(only)


-------------------------------day 8---------------------------------------------------------------------------------------------------------
Exception-->Interrupt normal flow of execution.

-->exception occur zale tr tya exception class cha object create karaych and throw karaych.

-->try{the statement which may throw exception}
catch(){to handdle exception raised by code}
finally{contain code/statement that must be executed in any condn even if exception occurs}

-->finally() file,socket,database connection etc. since you can not rely upon "finalized" method for the same task.

//ARM(Automatic Resource Management)-->inside ARM we must write only those classes which implements Autoclosable or closable interface.

-->Assertions are used to test the 'program. The advantage is assertions are by default disable, u need to enable them.

-->NoClassDefFound(Error) & classNotFound(Exception)
NoClassDefFoundError comes when class was present during compile time but not available at runtime.
classNotFound(Exception comes when we tries to load class explicitly using class.forName() but class was not there at that path so class not found exception.

-->procedure to create checked and unchecked exception:-
public class Myexception extends from Exception{//checked exception

}
public class Myexception Extends from RuntimeException{//unchecked Exception
}

-->In case of inheritance overriding method of sub can declare same exception as overriden method of base but it is not compulsary for overriden method.
-->overriding method if sub cannot declare exception if overriden method haven't declare it.

-->overriding and checked-exception rule :
a) overriding  method may not declare any checked exception.
b) overriding method can declare same checked exception or its sub-type declared by overriden method.
c) overriding method can not declare checked exception not declared by overriden method.

-->object class does not implement clonable interface. because founders wanted to gievn choice to programmers if want clone then implement clonable.

-->java.lang.object class 
protected Object clone() throws CloneNotSupportedException
if we want to use clone method then implement clonable and override clone() Method.

-->clone method is protected in object class. 

-->immutability rules-->1)don't provide setters
2)dont allow change/modify through immutable class ref from another class.
3)don't share reference of immutable class.

-->subclass cannot modify private properties of parent but it behave as if it has modified it.

-->immutability Achive karnyasathi class la final banvayche so that malacious subclass cannot change it.

-->Reflection(capability to load given class and find everything about it)
Constructor ctor=null;
			ctor=c.getDeclaredConstructor(String.class);
			Object second=null;
			second=ctor.newInstance("Welcome");
-->The reflection API represents, or reflects, the classes, interfaces, and objects in the current Java Virtual Machine. You'll want to use the reflection API if you are writing development tools such as debuggers, class browsers, and GUI builders. With the reflection API you can: 

1) Determine the class of an object. 
2) Get information about a class's modifiers, fields, methods, constructors, and superclasses. 
3) Find out what constants and method declarations belong to an interface. 
4) Create an instance of a class whose name is not known until runtime. 
5) Get and set the value of an object's field, even if the field name is unknown to your program until runtime. 
6) Invoke a method on an object, even if the method is not known until runtime. 
7) Create a new array, whose size and component type are not known until runtime, and then modify the array's components

-->Method m=c.getDeclaredMethod("disp1",null);

-->m.setAccessible(true);   (to Acess private method of class)

-->jevha aapn class chya constructor madhe System.setSecurityManager(new securityManager()); tevha aapn reflection api ne tyachya private properties Acess karu nahi shakt.(even not with setAccessible true)

-->class.forName() is used to locate and load the class.

-->class Lock- to apply lock on instance of class class.(To have synchronyzed static methods or blocks).

-->object lock-->to have synchonyzed non-static methods.

-->In multithreading we have to implement interface Runnable which contain only one method run() we have to override run method. 
create thread from main =>Thread t1=new thread();
t1.start();   (from this call goes to overriden run method )

-->process program under execution

-->thread is a part of program in exceution.

-->process based multitasking=> more than one process execution at a time. e.g excel and word are running simultaniously.

-->thread based multitasking=>more than one thread at a time. e.g inside excel printing and coping file at a time.

--> in case of multitasking actually cpu doing context switching.

-->Application of multi-threading in java :- due to multithreading feature, java has become effective on server side. e.g  Servlet , JSP etc.

-->Thread-Schedular
a) pre-emptive-->forcefully terminate the process.
b) time-slice-->give fixed cpu time to each process.
 

-->four imp steps in multiThreading=> 
1.create thread(class implements runnable)
2.define thread execution body(implement run())
3.register thread with thread scheduler(create thread and call Thread.start()).
4.exceute thread(done Automatically)

methods--> start()=>register thread with thread schedular
run()-->call by jvm thread Schedular to execute thread body.
join()-->t1.join() it will wait until t1 executes completly.

-->There are two ways to create multi-threading application.
1) extends Thread
2) implements Runnable 

-->In case of Extends Thread==> Thread t1= new Thread();
MYThreadClass implements Runnable==> MYThreadClass ob= new MYThreadClass();
Thread t1 = new Thread(ob);
Thread t2 = new Thread(ob);

-->Thread class implements Runnable

-->"synchronization" is a solution to the race condition.(in Sysnchronyzation one thread aquaire lock and other thread will be in seeking lock state.

-->a) wait=>it will make thread , release the lock and go to wait pool.

b) notify=>it will make the thread to move from wait pool to seeking lock state.

c) notifyAll=>it will make all the threads to move from wait pool to seeking lock state.

-->wait releases the lock on an object , sleep does not.

-->main thread always excutes first user defined thread taken care by jvm

-->Whenever blocked thread gets interrupted, it throws "InterruptedException".

-->born
	runnable
	running
	blocked
	dead